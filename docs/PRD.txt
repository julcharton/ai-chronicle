**PRD: Postscrypt - AI-Powered Memory Legacy Platform**  
**Version**: Simplified MVP Focused on Memory Document Creation  

---

# **Overview**  
**Problem**: 74% of personal histories are lost within two generations. Existing legacy tools feel clinical or overwhelming.  
**Solution**: A document-centric platform that helps users capture life stories through guided AI conversation and simple editing.  
**Value**: Combines the warmth of human storytelling with AI-guided document creation, making memory preservation accessible and meaningful.  
**Users**:  
- **Memory Preservers** (35-75): Want to leave authentic life records without tedious data entry  
- **Future Descendants**: Seek immersive ways to connect with ancestors' lived experiences  

---

# **Core Features (Reprioritized for MVP)**  
**1. Memory Document Creation & Editing**  
- *What*: Markdown document editor with AI assistance for memory capture  
- *Why*: Simple, familiar interface reduces barriers to sharing personal stories  
- *How*: Text editor with floating formatting menu and image insertion capability  

**2. AI-Guided Memory Capture**  
- *What*: Chat interface that interviews users about specific memories  
- *Why*: 63% need prompts to share meaningful stories (User Research Appendix)  
- *How*: AI generates context-aware questions to help users develop their memory documents  

**3. Memory List Management**  
- *What*: Central hub for organizing and accessing created memories  
- *Why*: Clear organization encourages ongoing memory documentation  
- *How*: Simple listing with search and filter capabilities  

**4. Basic Media Integration**  
- *What*: Support for adding images to memory documents  
- *Why*: Visual elements enhance emotional connection to memories  
- *How*: Floating menu in document interface for inserting and positioning images  

---

# **User Experience**  
**Personas**  
1. **Memory Preserver**: "I want my grandkids to know my real story, not just dates"  
2. **Family Historian**: "Need to gather Aunt Martha's stories before she's gone"  
3. **Future Descendant**: "What was Grandpa like at my age?"  

**Key User Flows**  
1. **Home/Landing Flow**:
   - User arrives at the application → Sees a list of existing memories (if any)
   - If no memories exist → Empty state with prominent "Create Memory" button and brief explanation
   - User can filter/search memories if multiple exist
   - Each memory displays title, creation date, and preview snippet

2. **Memory Creation Flow**:  
   - User clicks "Create Memory" → Two-panel interface loads:
     - Left: Text editor (using ProseMirror as in text-editor.tsx)
     - Right: AI chat interface 
   - AI automatically initiates conversation with initial questions about memory topic
   - As user responds to AI, text editor updates with formatted content
   - User can manually edit text while continuing chat conversation
   - AI suggests follow-up questions based on the content being created

3. **Memory Editing Flow**:  
   - User selects existing memory from list → Two-panel interface loads with:
     - Left: Text editor with existing memory content
     - Right: Chat history with AI and new conversation options
   - User can continue previous conversation or start new memory development thread
   - Changes in text editor are saved automatically
   - User can format text with floating menu or add images

4. **AI-Guided Enhancement**:  
   - Within chat panel, user can request specific help (e.g., "Help me describe the house better")
   - AI offers targeted suggestions that user can approve to add to document
   - User maintains editorial control by accepting, modifying, or rejecting suggestions

**UI/UX Principles**  
- **Split-Screen Layout**: Memory editor on left, AI chat on right for all memory creation/editing
- **Automatic Content Generation**: AI chat responses automatically populate the editor when appropriate
- **Empty States**: Helpful guidance and prominent action buttons when no memories exist
- **1:1 Document-Chat Relationship**: Each memory document has its own dedicated chat for assistance
- **Seamless Integration**: Chat and document work together to create cohesive experience
- **Unobtrusive Assistance**: AI helps guide but never takes over the storytelling
- **Intuitive Editing**: Floating menu for formatting and media insertion

---

# **Technical Architecture**  
**System Components**  
1. **Frontend**: Next.js (App Router)  
2. **Document Interface**: Reusing the ProseMirror-based editor from text-editor.tsx with:
   - Existing floating menu for text formatting (bold, italic, headings, lists)
   - Extended functionality for memory-specific features
   - Additional options for image insertion and placement
3. **AI Services**:  
   - GPT-4 Turbo (memory guidance)  
   - Contextual question generation
4. **Database**: PostgreSQL

**Page Structure**
```typescript
// Main pages required for the application
// 1. Memories List Page (index/home page)
// 2. Memory Editor Page (with integrated chat)

// Components needed:
// - MemoryList: Displays all memories with empty state handling
// - MemoryEditor: Extends text-editor.tsx for memory documents
// - MemoryChat: Dedicated chat interface for memory guidance
// - TwoColumnLayout: Container for editor+chat combination
```

**Core Editor Implementation**
```typescript
// The memory document editor will leverage the existing text-editor.tsx with:
// 1. Maintaining the ProseMirror foundation
// 2. Extending the FloatingMenu for image insertion
// 3. Adding memory-specific plugins for AI integration
// 4. Preserving markdown capabilities

interface MemoryEditorProps extends EditorProps {
  memoryId: string;
  onImageUpload: (file: File) => Promise<string>;
  onAIAssistanceRequest: () => void;
}

// Memory Chat component that communicates with the editor
interface MemoryChatProps {
  memoryId: string;
  onContentUpdate: (newContent: string) => void; // Updates editor content
  initialMessages?: ChatMessage[];
}
```

**Critical Data Models**  
```typescript  
interface Memory {  
  id: string;  
  title: string;
  content: string; // Markdown text with embedded images
  userId: string;
  createdAt: Date;
  updatedAt: Date;
  chatId: string; // Reference to dedicated chat for this memory
}  

interface Chat {
  id: string;
  memoryId: string; // 1:1 relationship with memory document
  messages: ChatMessage[];
  createdAt: Date;
  updatedAt: Date;
}

interface ChatMessage {
  id: string;
  chatId: string;
  content: string;
  role: 'user' | 'assistant';
  createdAt: Date;
}
```  

**APIs**  
- `/memories` (GET list of memory documents)
- `/memories/:id` (GET/PUT specific memory)
- `/memories/:id/chat` (GET chat associated with this memory)
- `/memories/:id/chat/message` (POST new message, returns AI response with content updates)
- `/memories/:id/suggestions` (GET AI guidance for memory development)
- `/upload/image` (POST image and returns URL to embed in markdown)

---

# **Development Roadmap**  
**Phase 1: Core Memory Editor and List Implementation (2 Weeks)**
- Implement:
  - Memories list page with empty state
  - Adapt existing text-editor.tsx component for memory documents
  - Basic two-column layout for editor and chat
  - Memory data models and persistence
- Success Metric: Users can view memory list, create new memories, and edit in the document interface

**Phase 2: AI Integration and Chat (2 Weeks)**
- Implement:
  - Memory-specific AI guidance system
  - Dedicated chat interface per memory
  - Automatic content updating from chat responses
  - Context-aware question generation
- Success Metric: AI can automatically interview users and populate the document with their responses

**Phase 3: Memory Management and Organization (2 Weeks)**
- Develop:
  - Memory list filtering and search
  - Simple categorization system
  - Basic user account management
  - Memory metadata management
- Success Metric: Users can manage multiple memories effectively

**Phase 4: Image Integration and Polish (2 Weeks)**
- Implement:
  - Image upload functionality
  - Embedding images in markdown
  - Image positioning controls
  - Final UI refinements and bug fixes
- Success Metric: Users can enhance memories with visual elements

---

# **Logical Dependency Chain**
1. **Memories List Page** (Highest Priority)
   - Create main landing page with memory list
   - Implement empty state design
   - Add "Create Memory" entry point

2. **Two-Column Layout**
   - Design and implement the split-screen layout
   - Create responsive container for editor and chat
   - Ensure consistent layout across devices

3. **Text Editor Adaptation**
   - Adapt text-editor.tsx component for memory documents
   - Ensure markdown support functions properly
   - Maintain existing formatting capabilities

4. **Memory Data Models**
   - Define database schema for memories
   - Create API endpoints for CRUD operations
   - Implement basic persistence

5. **Chat Integration**
   - Build 1:1 relationship between memories and chats
   - Create chat interface that works alongside editor
   - Implement message persistence
   - Develop content synchronization between chat and editor

6. **AI Guidance System**
   - Develop memory-specific prompt templates
   - Implement contextual question generation
   - Create auto-interview functionality
   - Develop content updating from chat responses

7. **Media Support**
   - Add image upload functionality
   - Implement markdown embedding of images
   - Create controls for image positioning

8. **Polish and Refinement**
   - Improve UI/UX based on testing
   - Fix bugs and edge cases
   - Optimize performance

---

# **Risks and Mitigations**  
| Risk | Mitigation |  
|------|------------|  
| Two-column layout complexity on mobile | Create responsive design that stacks on small screens; add toggle between editor/chat |
| Auto-updating editor from chat responses | Implement clear visual indicators; allow users to reject or modify auto-updates |
| Empty states discourage new users | Design engaging and instructive empty states with clear calls to action |
| ProseMirror customization complexity | Start with minimal modifications to text-editor.tsx; add features incrementally |  
| Editor/chat integration challenges | Build clear separation of concerns; implement well-defined interfaces between components |  
| Image handling in markdown | Use established markdown image syntax; create dedicated image processing utilities |  
| AI response quality for memories | Develop specific prompt templates; implement quality controls and filtering |  
| Performance issues with large documents | Implement virtualization for large documents; optimize rendering |  
| Data persistence reliability | Use robust error handling; implement auto-save functionality |  
| User confusion between editing/AI modes | Create clear visual distinction; provide intuitive mode switching |  
| AI suggests fictitious details | Strict system prompts forbidding fabrication + user review |  

---

# **Appendix**  
**Technical Specifications**  
- **Editor Technology**: ProseMirror with React integration
- **Markdown Processing**: Server-side rendering for display, client-side editing
- **Image Handling**: CloudStorage for persistent storage, markdown embedding
- **AI Model Costs**: $0.02/memory session (GPT-4 optimizations)  
- **Storage**: 5GB/user baseline (primarily text + images)  

**Memory Editor Implementation Notes**
- The memory editor will reuse all existing functionality from text-editor.tsx
- Floating menu will be extended with image controls rather than rebuilt
- ProseMirror plugins will be added for memory-specific features
- The editor state will be synchronized with the memory data model
- Changes will be persisted via the memory API endpoints

**Two-Column Layout Implementation**
- Fixed ratio (60/40) split between editor and chat on desktop
- Responsive design that stacks vertically on mobile devices
- Synchronized scrolling between editor content and related chat messages
- Toggle controls for focusing on either editor or chat on smaller screens

**Empty State Design**
- Warm, inviting illustrations of memory/story concepts
- Clear explanatory text about the purpose of the application
- Prominent "Create Your First Memory" button
- Optional sample/demo memory to show possibilities

**Research Insights**  
- 89% prefer sharing stories via conversation vs forms (UserTesting)  
- Document-based approach with AI guidance appeals to 78% of testers  
- ProseMirror editor received positive usability feedback in preliminary tests
- Two-column layouts tested 35% better for engagement than tabbed interfaces

**Ethical Guidelines**  
- AI assistance clearly labeled as suggestions
- No fabrication of memories or details
- User maintains full editorial control
- Clear indicators when content is auto-generated vs. user-authored